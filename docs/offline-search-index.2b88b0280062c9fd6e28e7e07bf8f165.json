[{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/overview/","tags":"","title":"快速开始"},{"body":"flowchart TD A([开始]) --\u003e A1[主分支 main]; A([开始]) --\u003e A2[开发分支 develop]; Z([结束]) A2 --\u003e A21[新增功能需求: 创建功能分支 feature-XXX]; A21 --\u003e A22{新开发功能是否完成}; A22 --\u003e |是| A221[提交代码执行 CI 阶段]; A221 --\u003e A2211{Runner: 自动化构建与测试案例是否通过}; A2211 --\u003e |是| A22111[从 develop 合并代码并删除 feature-XXX 分支]; A2211 --\u003e |否| A222; A22 --\u003e |否| A222[继续开发自测完成后提交代码]; A222 --\u003e A221; A22111 --\u003e Z; A2 --\u003e A31[累计功能发布: 创建发布分支 release-X.Y]; A31 --\u003e A311{是否已存在 release-X.Y 分支}; A311 --\u003e |是| A3111[从 develop 合并最新代码]; A311 --\u003e |否| A3112[从 develop 创建最新分支]; A3111 --\u003e A3113[监听合并或创建事件 触发CICD阶段]; A3112 --\u003e A3113; A3113 --\u003e A31131{Runner: 自动化构建与测试案例是否通过}; A31131 --\u003e |是| A311311[合并至 develop 分支]; A311311 --\u003e A3113112[合并至 main 分支]; A31131 --\u003e |否| A311312[在 release-X.Y 分支修复异常提交代码]; A311312 --\u003e A3113; A3113112 --\u003e Z; A1 --\u003e A12[来自 release-X.Y 或 hotfix-XXX 的合并请求]; A12 --\u003e A121{管理员确认是否允许}; A121 --\u003e |是| A1211[确认合并]; A121 --\u003e |否| A1212[拒绝合并]; A1212 --\u003e A311312; A1211 --\u003e A13[提交标签 git tag vX.Y.Z]; A13 --\u003e A131[使用 release-X.Y 或 hotfix-XXX 阶段构建的镜像进行部署]; A131 --\u003e A1311{Runner: 自动化部署是否通过}; A1311 --\u003e |是| Z; A1311 --\u003e |否| A311312; A1 --\u003e A11[线上环境发现BUG]; A11 --\u003e A111{确认为BUG是否需修复}; A111 --\u003e |是| A1111[从 main 仓库创建 hotfix-XXX 分支]; A111 --\u003e |否| Z; A1111 --\u003e A112[仅修复BUG代码不涉及任何功能新增]; A112 --\u003e A1121[提交代码在 hotfix-XXX 分支]; A1121 --\u003e A11211{Runner: 自动化构建与测试案例是否通过}; A11211 --\u003e |是| A112111[构建提交容器镜像]; A11211 --\u003e |否| A1121; A112111 --\u003e A11212[合并至 develop 与 main 分支]; A11212 --\u003e A11213[删除 hotfix-XXX 分支]; A11213 --\u003e A12; ","categories":"","description":"","excerpt":"flowchart TD A([开始]) --\u003e A1[主分支 main]; A([开始]) --\u003e A2[开发分支 develop]; …","ref":"/docs/spec-dev/flows/git-flow/","tags":"","title":"Git Flow"},{"body":"简要概述 高效的持续交付体系，必须需要一个合适的代码分支管理策略，主要有：主干开发、特性分支开发。\n只能根据不通的业务场景选择最适合的策略。\n主干开发 开发者在主分支提交代码，发布版本时创建版本发布分支。\n优点：\n集成频繁效率高； 无需在多个分支之间切； 仅包含：主分支、版本分支； 缺点：\n可能出现某个人的代码失误而影响全局； 需要在代码运行期间使用特性切换加速开发； 特性分支开发 需要新增特性时，开发者从主干分支克隆特性分支，仅允许在该分支直接提交代码，待功能完成之后合并至主分支，常见的模型有：git flow、github flow、gitlab flow 三种模型。\nGit Flow 该模型是在2010年构想出来的，在这十几年里，已经被许多软件团队使用，以至于部分开发者将其视为某种标准。\n在使用会涉及到较繁琐的流程，很多团队新人还需额外时间学习才能融入业务开发，反而降低了效率。\n分支功能描述：\n名称 功能 生命周期 代码稳定 权限 main 主分支 长期 是 仅允许开发负责人且只能从 release 分支合并，tag 只能从 main 分支标记 develop 开发分支 长期 是 不允许直接提交，只能由开发负责人且只能从 feature 分支合并 release-X.Y 发布分支 长期 是 不允许直接提交，仅允许从 develop 分支合并 feature-XYZ 功能分支 合并后删除 否 开发可直接提交代码，必须从 develop 分支创建出来 hotfix-XYZ 补丁分支 合并后删除 否 开发可直接提交代码，比较急的异常，直接从 main 分支创建，完成后必须合并至 main 与 develop 分支 查看分支流程。\n查看规范出处。\nGitHub Flow 仅包含主分支与特性分支。\n相比 Git Flow 简化了流程，开发者接收需求并创建独立的特性分支，完成后则发起 “Pull requests” 请求合并，待在其他人审阅并签署确认后由专人合并到主分支，最后删除特性分支。\n名称 功能 生命周期 代码稳定 权限 main 主分支 长期 是 不允许直接提交代码，仅允许负责人合并来自其他分支 feat-X 特性分支 合并后删除 否 由开发人员控制，必须包含完整的文档与测试案例 查看分支流程。\n查看规范出处。\nGitLab Flow https://docs.gitlab.com/ee/topics/gitlab_flow.html\n","categories":"","description":"","excerpt":"简要概述 高效的持续交付体系，必须需要一个合适的代码分支管理策略，主要有：主干开发、特性分支开发。\n只能根据不通的业务场景选择最适合的策略。 …","ref":"/docs/spec-dev/git-branch/","tags":"","title":"分支管理"},{"body":"简要概述 通过容器环境，快速创建应用模版并编译、运行。\n相对于本地环境，推荐使用这种方式，这样无需在开发机器安装依赖的组件。\n生成代码并运行 创建应用模版 docker run \\ --rm \\ -v $(pwd):/usr/local/src \\ -w /usr/local/src \\ registry.cn-hangzhou.aliyuncs.com/grpc-kit/cli:0.2.4-beta.1 \\ grpc-kit-cli new -t service -p opsaid -s test1 运行应用代码 docker run -i -t --rm \\ -v $GOPATH/pkg:/go/pkg \\ -v $(pwd):/usr/local/src \\ -w /usr/local/src \\ --network host \\ registry.cn-hangzhou.aliyuncs.com/grpc-kit/cli:0.2.4-beta.1 \\ make run 服务访问测试 微服务接口文档 http://127.0.0.1:8080/openapi-spec/ 微服务编译版本 # curl http://127.0.0.1:8080/version | python -m json.tool { \"appname\": \"test1.v1.opsaid\", \"build_date\": \"2023-01-13T09:10:45Z\", \"git_commit\": \"1234567890123456789012345678901234567890\", \"git_branch\": \"\", \"go_version\": \"go1.18.5\", \"compiler\": \"gc\", \"platform\": \"darwin/amd64\", \"cli_version\": \"0.2.3\", \"commit_unix_time\": 0, \"release_version\": \"0.1.0\" } 微服务性能数据 # curl http://127.0.0.1:8080/metrics # HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles. # TYPE go_gc_duration_seconds summary go_gc_duration_seconds{quantile=\"0\"} 0.000114581 go_gc_duration_seconds{quantile=\"0.25\"} 0.000873528 go_gc_duration_seconds{quantile=\"0.5\"} 0.002296699 go_gc_duration_seconds{quantile=\"0.75\"} 0.003722618 go_gc_duration_seconds{quantile=\"1\"} 0.010592338 go_gc_duration_seconds_sum 0.033207328 go_gc_duration_seconds_count 12 # HELP go_goroutines Number of goroutines that currently exist. # TYPE go_goroutines gauge go_goroutines 19 ... 微服务健康探测 探测流量仅到 gateway 不会调度到 grpc 服务。\n# curl http://127.0.0.1:8080/ping OK 探测流量同时到 gateway 与 grpc 服务。\n# curl 'http://127.0.0.1:8080/healthz?service=test1.v1.opsaid' {\"status\":\"SERVING\"} 示例 demo 接口 # curl -u user1:grpc-kit-cli http://127.0.0.1:8080/api/demo ","categories":"","description":"","excerpt":"简要概述 通过容器环境，快速创建应用模版并编译、运行。\n相对于本地环境，推荐使用这种方式，这样无需在开发机器安装依赖的组件。 …","ref":"/docs/overview/docker/","tags":"","title":"容器环境"},{"body":" gitGraph commit commit branch increase-test-timeout commit commit checkout main merge increase-test-timeout commit branch add-code-of-conduct commit commit checkout main merge add-code-of-conduct commit ","categories":"","description":"","excerpt":" gitGraph commit commit branch increase-test-timeout commit commit …","ref":"/docs/spec-dev/flows/github-flow/","tags":"","title":"Github Flow"},{"body":"简要概述 用于规范项目代码提交日志，这里借鉴 Angular 规则，规范化的提交记录，有以下好处：\n快速查找历史变更信息； 自动化生成 CHANGELOG.md 文档； 提交规范 各个 git commit 提交记录，由：header、body、footer 三部分组成，格式如下：\n\u003cheader\u003e // 空一行 \u003cbody\u003e // 空一行 \u003cfooter\u003e 其中 header 是强制填写，由以下三部分组成：\n\u003ctype\u003e(\u003cscope\u003e): \u003cshort summary\u003e │ │ │ │ │ └─⫸ 本次变更内容的一句话总结，中文或小写英文，末尾不带句号 │ │ │ └─⫸ 涉及变更的主要模块，如：cli|pkg|api │ └─⫸ 本次提交功能变更的类型，如：feat|fix|docs|perf|refactor|test 参数详解 header type type 说明 feat 涉及业务代码变更，添加新功能 fix 涉及业务代码变更，修复已知BUG perf 涉及业务代码变更，优化功能性能、体验等 refactor 涉及业务代码变更，但不属于 feat、fix、perf 的类型 ci 仅涉及流水线变更，如：gitlab-ci、github action 的 yaml 文件 docs 仅涉及文档类变更，如：README.md 或 代码注释 等 release 仅涉及版本号变更，如：VERSION、CHANGELOG.md 中关联的值 test 仅涉及测试代码变更，如：hello_test.go build 仅涉及构建编译依赖的组件版本等变更，如：go.mod chore 其他琐碎的变更，但对代码功能没有影响，比如删除了无用的代码、注释等清理操作 scope 代码变更的模块，如：cli、pkg、api 等，这块为可选，非必填内容。\nsummary 编写一个具有概括性简短的描述\n不超过 50 个字符 可选择编写中文或英文 英文统一小写，首字母不大写 英文专业术语除外，如：Makefile 末尾不带任何标点符号 示例：\nfeat(cli): 在 Makefile 中添加容器化构建应用 release: cut the 0.2.4-beta.1 docs: release notes for the 0.2.4-beta.1 body 解释此次变更的详细描述，可由多行组成，格式准守 “Markdown” 语法。\nfooter 仅在两种情况下才会使用：\n不兼容的更改 如果当前代码提交之后，会对上一个版本不兼容，则必须以 BREAKING CHANGE 开头，后面在添加详细描述。\nBREAKING CHANGE: \u003cbreaking change summary\u003e \u003cBLANK LINE\u003e \u003cbreaking change description + migration instructions\u003e \u003cBLANK LINE\u003e \u003cBLANK LINE\u003e Fixes #\u003cissue number\u003e 关闭 issue 如果当前提交是针对某个 “issue”，那么可以以 Closes # 加问题编号。\n已经废弃的功能 DEPRECATED: \u003cwhat is deprecated\u003e \u003cBLANK LINE\u003e \u003cdeprecation description + recommended update path\u003e \u003cBLANK LINE\u003e \u003cBLANK LINE\u003e Closes #\u003cpr number\u003e 相关示例 查看历史变更记录 git log HEAD --pretty=format:%s ","categories":"","description":"","excerpt":"简要概述 用于规范项目代码提交日志，这里借鉴 Angular 规则，规范化的提交记录，有以下好处：\n快速查找历史变更信息； …","ref":"/docs/spec-dev/git-commit/","tags":"","title":"提交日志"},{"body":"简要概述 通过在本机安装 go、protoc、grpc 等编译依赖的组件，一般情况下更推荐使用容器环境进行应用模版创建、编译。\n开发环境准备 go版本必须大于等于1.17.x 版本检查\ngo version centos 7 安装方式\nyum install -y epel-release.noarch yum install -y golang.x86_64 macOS 安装方式\nbrew install go 设置全局GOPATH且开启go mod支持 export GO111MODULE=on # 根据实际情况是否需要设置proxy export GOPROXY=\"https://goproxy.cn\" # GOPATH仅做示例，根据实际情况更改 export GOPATH=$HOME/go export PATH=$PATH:$HOME/bin:$GOPATH/bin 请确保以上变量在系统全局生效，可以写入 $HOME/.bash_profile 或 $HOME/.zshrc 等\n安装 protoc Linux 系统 protoc 选择 3.17.3 版本，示例：\n## 可直接从这里下载对应的二进制 cd /usr/local/src curl -L -O 'https://github.com/protocolbuffers/protobuf/releases/download/v3.17.3/protoc-3.17.3-linux-x86_64.zip' unzip protoc-3.17.3-linux-x86_64.zip mv bin/protoc /usr/local/bin/ mv include/google /usr/local/include/ rmdir bin/ include/ macOS apple 芯片选择 v21.12 的 aarch 架构版本，如：\nprotoc-3.19.3-linux-aarch_64.zip curl -L -O 'https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-osx-aarch_64.zip' 安装 protoc-gen-X protoc-gen-go、protoc-gen-go-grpc选择1.27.1与1.1.0版本\ngo install google.golang.org/protobuf/cmd/protoc-gen-go@v1.27.1 go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1.0 protoc-gen-gogo选择为v1.3.2版本，示例：\ngo install github.com/gogo/protobuf/protoc-gen-gogo@v1.3.2 protoc-gen-swagger、protoc-gen-grpc-gateway选择1.16.0版本（不支持2.X），示例：\ngo install github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger@v1.16.0 go install github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway@v1.16.0 安装其他依赖的proto定义文件 mkdir -p $GOPATH/src/github.com/{grpc-kit,gogo,grpc,googleapis,grpc-ecosystem} git clone --depth 1 https://github.com/grpc-kit/api.git $GOPATH/src/github.com/grpc-kit/api git clone -b v1.1.0 --depth 1 https://github.com/gogo/googleapis.git $GOPATH/src/github.com/gogo/googleapis git clone -b v1.3.2 --depth 1 https://github.com/gogo/protobuf.git $GOPATH/src/github.com/gogo/protobuf git clone --depth 1 https://github.com/grpc/grpc-proto.git $GOPATH/src/github.com/grpc/grpc-proto git clone --depth 1 https://github.com/googleapis/googleapis.git $GOPATH/src/github.com/googleapis/googleapis git clone -b v1.16.0 --depth 1 https://github.com/grpc-ecosystem/grpc-gateway.git $GOPATH/src/github.com/grpc-ecosystem/grpc-gateway 安装 grpc-kit-cli 二进制 可通过以下两种方式进行\n下载二进制安装 https://github.com/grpc-kit/cli/releases 源码编译安装 git clone https://github.com/grpc-kit/cli.git make build cp ./build/grpc-kit-cli /usr/local/bin 服务访问测试 参考使用容器环境。\n","categories":"","description":"","excerpt":"简要概述 通过在本机安装 go、protoc、grpc 等编译依赖的组件，一般情况下更推荐使用容器环境进行应用模版创建、编译。 …","ref":"/docs/overview/local/","tags":"","title":"本机环境"},{"body":"简要概述 认证、鉴权。\n配置示例 security: enable: true authentication: insecure_rpcs: - SearchHosts oidc_provider: issuer: https://accounts.example.com config: client_id: example supported_signing_algs: - RS256 skip_client_id_check: true skip_expiry_check: false skip_issuer_check: true insecure_skip_verify: true http_users: - username: user1 password: pass1 groups: - sysadmin authorization: allowed_groups: - sysadmin 配置参数 Security 名称 类型 说明 enable bool 是否开启认证、鉴权 authentication Authentication 用户认证，也就是当前是谁在登录 authorization Authorization 用户鉴权，也就是当前登录用户是否有权限操作对应资源 Authentication 名称 类型 说明 insecure_rpcs []string 对应 gRPC 的方法，可以跳过认证 oidc_provider OIDCProvider OIDC 相关配置 http_users BasicAuth 用户密码列表 OIDCProvider 名称 类型 说明 issuer string oidc 提供者 config OIDCConfig oidc 配置 OIDCConfig 名称 类型 说明 client_id string 用于验证 token.aud 是否与 client_id 相等 supported_signing_algs []string 服务端允许 token 的签名算法类型 skip_client_id_check bool 忽略 token.aud 与client_id 的验证 skip_expiry_check bool 忽略 token 是否过期的验证 skip_issuer_check bool 忽略 token issuer 的验证 insecure_skip_verify bool 忽略 issuer 的ca验证 Authorization 名称 类型 说明 allowed_groups []string 所有请求至该服务端的用户必须至少属于一个组内 使用场景 允许所有请求 security: enable: false 服务端允许所有接口请求，均以匿名用户。\nHTTP Basic 用户 security: enable: true authentication: http_users: - username: user1 password: pass1 - username: user2 password: pass2 开启服务端接口验证，通过 HTTP Basic Auth 方式，允许用户 “user1:pass1” 或 “user2:pass2” 发起请求通过认证。\n忽略特定 RPC 验证 security: enable: true authentication: insecure_rpcs: - Demo - HealthCheck http_users: - username: user1 password: pass1 开启服务端接口验证，但是忽略 “Demo” 与 “HealthCheck” 两个 gRPC 方法。\n开启 Tokne 支持 HS256 签名 security: enable: true authentication: oidc_provider: issuer: https://accounts.example.com config: supported_signing_algs: - HS256 skip_issuer_check: true insecure_skip_verify: true http_users: - username: user1 password: pass1 支持客户端 Token 是以 HS256 签名算法，其中 “token.sub” 为 “user1” 并使用 “pass1” 为密钥做签名。\n注意：这种签名的 token 不会传递给所配置的 oidc 服务提供验证，而是替换使用本地配置的 http basic 用户所对应的密码作为 token 的签名密钥\n","categories":"","description":"","excerpt":"简要概述 认证、鉴权。\n配置示例 security: enable: true authentication: insecure_rpcs: …","ref":"/docs/spec-cfg/security/","tags":"","title":"认证鉴权"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/spec-cfg/","tags":"","title":"配置规范"},{"body":" 本项目遵守的开发规范。\n","categories":"","description":"","excerpt":" 本项目遵守的开发规范。\n","ref":"/docs/spec-dev/","tags":"","title":"开发规范"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/changelog/","tags":"","title":"更新日志"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/spec-dev/flows/","tags":"","title":"分支流程"},{"body":"Changelog 名称 说明 Added 添加新功能 Changed 功能的变更 Deprecated 未来会删除 Removed 之前为Deprecated状态，此版本被移除 Fixed 功能的修复 Security 有关安全问题的修复 [Unreleased] [0.2.3] - 2022-11-28 Added grpc-kit/pkg 模块\n支持针对用户组进行鉴权 http_users 新增 “groups” 属性； 如果配置了 “security.authorization.allowed_groups” 则所有需要认证鉴权的接口必须属于该组里面，否则会403； 用户组区分大小写 添加最小化配置示例 未配置的模块，将不开启该功能 添加 “app-mini.yaml” 示例 添加健康检测服务可对外部网络 添加 “HTTP GET /ping” 接口，不过 grpc 服务 区别于 “HTTP GET /healthz”，该接口过 grpc 服务 grpc-kit/cli 模块\n支持自定义应用短名称 通过自定义\"SHORTNAME\"变量； 所有脚本应用shell更改 ubuntu默认为dash，明确使用\"/bin/bash\"，而非\"/bin/sh\"，会导致部分shell不支持 更改默认 http 服务端口 10080 至 8080 由于chrome等浏览器默认对\"10080\"端口存在\"ERR_UNSAFE_PORT\"告警，所以更改http默认为\"8080\" cli、pkg 组件版本号统一 为了解决统一编写变更记录(CHANGELOG.md) 支持自动生成 kubernetes 编排模版 新增 “DEPLOY_ENV” 变量，表示部署环境，如：dev、test、prod 新增 “BUILD_ENV” 变量，表示构建环境，一般用户自定义，默认为：local 新增指令 make manifests 生成基于 Kubernetes 的编排清单 模版路径：scripts/templates/kubernetes [0.2.2] - 2022-06-30 Changed 版本号格式的变更 旧规则以\"v\"为前缀，更新后不在带\"v\"为前缀，如：“v0.1.0-beta.3”，变更为：“0.1.0-beta.3”\nAdded 新增\"VERSION\"文件 用于描述当前分支版本，同时提供给CICD使用，如果当前分支未打成\"tag\"，则均说明是先行版本号，同时版本去掉以\"v\"开头；\n新增\"Makefile\"的帮助说明 make help [0.2.1] - 2022-06-09 Added “api/doc\"目录内容更改至\"public/doc” “api/proto\"目录更改为\"api/{product-code}/{short-name}” “cli\"新增\"repository\"参数用于说明代码仓库名 rpc客户端、服务端实例初始化转移至\"cfg\"实现 favicon.ico文件移至自定义http handler中实现 http接口统一以”/api/“为前缀对外暴露 ","categories":"","description":"","excerpt":"Changelog 名称 说明 Added 添加新功能 Changed 功能的变更 Deprecated 未来会删除 Removed 之前 …","ref":"/docs/changelog/changelog-0.2/","tags":"","title":"CHANGELOG 0.2"},{"body":"Changelog 名称 说明 Added 添加新功能 Changed 功能的变更 Deprecated 未来会删除 Removed 之前为Deprecated状态，此版本被移除 Fixed 功能的修复 Security 有关安全问题的修复 [Unreleased] [0.1.1] - 2021-11-10 Added 添加pkg/errors的示例 默认配置使用yaml格式 更新依赖的grpc-gateway等几个版本 根据product_code与short_name自动生成服务名称 服务结构添加rpc.Client属性，用于调用其他依赖服务 [0.1.0] - 2020-04-12 Added 首次发布 ","categories":"","description":"","excerpt":"Changelog 名称 说明 Added 添加新功能 Changed 功能的变更 Deprecated 未来会删除 Removed 之前 …","ref":"/docs/changelog/changelog-0.1/","tags":"","title":"CHANGELOG 0.1"},{"body":"api 作用 所有基础数据结构的定义\nFaqs 使用gogoproto来代替google官方的proto是什么原因？ 需要兼容各个现有的http服务接口，比如pushgateway、alertmanager等\n默认序列化的规则 restful接口规范 具体接口返回属性以：驼峰、下画线 没有统一标准\n除非服务特殊说明，否则默认均以下划线为默认标准，\n{ \"type_url\": \"\", } 所有返回值建议带key，默认均不建议直接通过数组响应\n[ {xxx}, {xxx} ] =\u003e { \"key\": [ {xxx}, {yyy} ] } 使用场景 控制平面 基于k8s apiserver为控制平面类，可以接入git进行管理\n数据平面 基于grpc-kit为数据平面，也就是所有流量要经过它\n接口规范 POST /api/alerts /healthz /metrics /debug/pprof 参考规范 kubebuilder https://cloud.google.com/apis/design https://stackoverflow.com/questions/5543490/json-naming-convention-snake-case-camelcase-or-pascalcase https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/create#request-body ","categories":"","description":"","excerpt":"api 作用 所有基础数据结构的定义\nFaqs 使用gogoproto来代替google官方的proto是什么原因？ 需要兼容各个现有 …","ref":"/docs/spec-cfg/api/","tags":"","title":""},{"body":"cfg 配置说明 当Debugger为\"debug\"模式或者开启opentracing的log_field http_body，且content-type为json时，开启记录用户请求体\n仅 LocalConfig 对外提供函数调用，其他均为方法内私有\n","categories":"","description":"","excerpt":"cfg 配置说明 当Debugger为\"debug\"模式或者开启opentracing的log_field http_body， …","ref":"/docs/spec-cfg/cfg/","tags":"","title":""},{"body":"Readme 结合go领域比较出名的工具适配\n说明 api 用于定义项目的公共结构 cfg 用于实现项目配置类的初始化 pkg 用于实现项目各个公共实现 doc 用于记录项目的文档使用 web 用于实现项目的可视化管理后台 adm 用于实现项目的管理接口\n代码 https://github.com/googleapis/go-genproto https://github.com/googleapis/googleapis/blob/master/google/monitoring/v3/metric.proto\n","categories":"","description":"","excerpt":"Readme 结合go领域比较出名的工具适配\n说明 api 用于定义项目的公共结构 cfg 用于实现项目配置类的初始化 pkg 用于实现项目 …","ref":"/docs/spec-cfg/cli/","tags":"","title":""},{"body":" 快速生成代码模版，以符合相同规范、统一治理的微服务脚手架，助力产品快速更新迭代。\ngRPC Kit 文档中心 源码跟踪 ","categories":"","description":"","excerpt":" 快速生成代码模版，以符合相同规范、统一治理的微服务脚手架，助力产品快速更新迭代。\ngRPC Kit 文档中心 源码跟踪 ","ref":"/","tags":"","title":"gRPC Kit"},{"body":" gGRPC Kit 是什么？\n一个以 Go 语言为主的微服务脚手架，主要基于以下几个核心类库实现：\ngrpc gogo grpc-gateway ","categories":"","description":"","excerpt":" gGRPC Kit 是什么？\n一个以 Go 语言为主的微服务脚手架，主要基于以下几个核心类库实现：\ngrpc gogo …","ref":"/docs/","tags":"","title":"Documentation"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"}]