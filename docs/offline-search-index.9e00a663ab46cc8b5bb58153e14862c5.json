[{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/overview/","tags":"","title":"快速开始"},{"body":"简要概述 约束生成微服务所依赖的几个公共名称\n内部变量 变量名 中文名 取值范围 示例 描述 CLI_VERSION 工具版本 [0-9].\\d.\\d 0.3.0 生成该模版所使用的 grpc-kit-cli 版本 ORGANIZATION 组织代码 见变量组合 grpc-kit 产品所在的公司或部门 PRODUCT_CODE 产品代码 ^([a-z0-9]){4,}$ opsaid 同一产品使用相同代码，使用单个词 SHORT_NAME 应用短名 ^([a-z0-9]){4,}$ test1 同一产品使用不同短名，使用单个词 API_VERSION 接口版本 v[1-9]+ v1 微服务主接口版本 APPNAME 应用名称 见变量组合 opsaid-test1-v1 xx PROTO_PACKAGE 服务包名 见变量组合 grpc_kit.api.opsaid.test1.v1 x SERVICE_CODE 服务代码 见变量组合 test1.v1.opsaid xx SERVICE_TITLE 服务标题 见变量组合 OpsaidTest1 xx SERVICE_NAME 服务全名 见变量组合 test1.v1.opsaid.api.grpc-kit.com xx 变量组合 变量名 组合格式 APPNAME ${PRODUCT_CODE}-${SHORT_NAME}-${API_VERSION} PROTO_PACKAGE ${ORGANIZATION}.api.${PRODUCT_CODE}.${SHORT_NAME}.${API_VERSION} SERVICE_CODE ${SHORT_NAME}.${API_VERSION}.${PRODUCT_CODE} SERVICE_TITLE ${PRODUCT_CODE}${SHORT_NAME} SERVICE_NAME ${SHORT_NAME}.${API_VERSION}.${PRODUCT_CODE}.${API_GATEWAY} 注意：\n在 “PROTO_PACKAGE” 中，如果变量 “ORGANIZATION” 存在中化线\"-\"，则需转化为下划线\"_\"； 在 “SERVICE_TITLE” 中，变量 “PRODUCT_CODE” 与 “SHORT_NAME” 首字母均大写； ","categories":"","description":"","excerpt":"简要概述 约束生成微服务所依赖的几个公共名称\n内部变量 变量名 中文名 取值范围 示例 描述 CLI_VERSION …","ref":"/docs/spec-api/key-terms/","tags":"","title":"关键术语"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/devops/deploy/","tags":"","title":"服务部署"},{"body":"简要概述 如何通过 proto 编写一个符合相同规范的服务定义。\n示例模版 // 仅支持版本 proto3 syntax = \"proto3\"; // 服务包名称 package grpc_kit.api.opsaid.test1.v1; // 生成的 go 包 option go_package = \"github.com/opsaid/test1/api/opsaid/test1/v1;test1v1\"; // 引入依赖的外部 proto 文件 import \"github.com/grpc-kit/api/known/status/v1/response.proto\"; // 同组 RPC 方法对应一个 proto 文件，以该组 RPC 名称的小写字母为文件名 import \"github.com/opsaid/test1/api/opsaid/test1/v1/demo.proto\"; // 该微服务支持的 RPC 方法定义 service OpsaidTest1 { rpc HealthCheck(grpc_kit.api.known.status.v1.HealthCheckRequest) returns (grpc_kit.api.known.status.v1.HealthCheckResponse) {} rpc Demo(DemoRequest) returns (DemoResponse) {} } 名称规范 proto 包名 格式：\npackage {组织代码}.api.{产品代码}.{应用短名}.{接口版本} 示例：\npackage grpc_kit.api.opsaid.test1.v1; 名称 示例 说明 组织代码 grpc_kit 同一个组织下，如：公司、部门等 产品代码 opsaid 同一个产品体系，如：运维助手 应用短名 test1 同一个产品友好名称，如：告警服务 接口版本 v1 服务接口主版本，微服务在 “0.1.X” 与 “1.X” 均表示为 “v1” go 包名 格式：\noption go_package = \"{引用 pb.go 包地址};{应用短名}{接口版本}\"; 示例：\noption go_package = \"github.com/grpc-kit/pkg/api/known/example/v1;examplev1\"; 名称 示例 说明 引用 pb.go 包地址 github.com/grpc-kit/pkg/api/known/example/v1 不一定是 proto 源文件地址 {应用短名}{接口版本} examplev1 两个组合，中间没有任何分隔符 service 名称 格式：\nservice {产品代码}{应用短名} { ...... } 示例：\nservice OpsaidTest1 { ...... } 名称 示例 说明 {产品代码}{应用短名} OpsaidTest1 两个单词组合，中间无风格符且首字母大写 ","categories":"","description":"","excerpt":"简要概述 如何通过 proto 编写一个符合相同规范的服务定义。\n示例模版 // 仅支持版本 proto3 syntax = …","ref":"/docs/spec-api/service/","tags":"","title":"定义服务"},{"body":"简要概述 向服务发送 API 请求，可能会产生多种不同的错误响应，以下文档将会描述数据结构以及大致的原因。\n响应体结构 查看完整的 proto 文件定义，关键部分如下：\n// ErrorResponse 用于定义统一错误响应体 message ErrorResponse { Status error = 1; } // Status 用于定义统一错误状态码 message Status { int32 code = 1; string status = 2; string message = 3; repeated google.protobuf.Any details = 4; } 一个 json 示例：\n{ \"error\": { \"code\": 5, \"status\": \"NotFound\", \"message\": \"unknown service\", \"details\": [ { \"@type\": \"type.googleapis.com/grpc_kit.api.known.status.v1.TracingRequest\", \"id\": \"b17f76dc51de4098bc974e5f2009c097\" } ] } } 状态码说明 code status http code default message 0 OK 200 No error. 1 Canceled 499 Request cancelled by the client. 2 Unknown 500 Unknown server error. 3 InvalidArgument 400 Client specified an invalid argument. 4 DeadlineExceeded 504 Request deadline exceeded. 5 NotFound 404 A specified resource is not found, or the request is rejected by undisclosed reasons, such as whitelisting. 6 AlreadyExists 409 The resource that a client tried to create already exists. 7 PermissionDenied 403 Client does not have sufficient permission. 8 ResourceExhausted 429 Either out of resource quota or reaching rate limiting. 9 FailedPrecondition 400 Request can not be executed in the current system state, such as deleting a non-empty directory. 10 Aborted 409 Concurrency conflict, such as read-modify-write conflict. 11 OutOfRange 400 Client specified an invalid range. 12 Unimplemented 501 The API method not implemented or enabled by the server. 13 Internal 500 Internal server error. 14 Unavailable 503 Service unavailable. 15 DataLoss 500 Unrecoverable data loss or data corruption. 16 Unauthenticated 401 Request not authenticated due to missing, invalid, or expired OAuth token. ","categories":"","description":"","excerpt":"简要概述 向服务发送 API 请求，可能会产生多种不同的错误响应，以下文档将会描述数据结构以及大致的原因。 …","ref":"/docs/spec-api/error/","tags":"","title":"处理错误"},{"body":"简要概述 描述服务的基础信息。\n配置示例 services: root_path: grpc-kit namespace: example service_code: test1.v1.opsaid api_endpoint: api.grpc-kit.com grpc_address: 0.0.0.0:10081 http_address: 0.0.0.0:10080 数据结构 // ServicesConfig 基础服务配置，用于设定命名空间、注册的路径、监听的地址等 type ServicesConfig struct { RootPath string `mapstructure:\"root_path\"` Namespace string `mapstructure:\"namespace\"` ServiceCode string `mapstructure:\"service_code\"` APIEndpoint string `mapstructure:\"api_endpoint\"` GRPCAddress string `mapstructure:\"grpc_address\"` HTTPAddress string `mapstructure:\"http_address\"` PublicAddress string `mapstructure:\"public_address\"` } 配置参数 名称 类型 说明 root_path string 服务注册的前缀，全局统一，一般同组织代码 namespace string 服务注册的空间，全局统一 service_code string 服务的代码，名称唯一且必填，格式：应用短名.接口版本.产品代码 api_endpoint string 接口网关的地址 grpc_address string 服务所监听的grpc地址（如未设置，自动监听在127.0.0.1的随机端口） http_address string 服务所监听的http地址（如未设置，则不开启gateway服务） public_address string 服务注册，外部网络可连接的grpc地址（一般等同于grpc-address） 应用场景 开启 http 监听 services: service_code: test1.v1.opsaid http_address: 127.0.0.1:8080 grpc_address: 127.0.0.1:10081 启动服务，将会在 127.0.0.1 上的 8080 监听 http 协议请求，这些请求会自动转化为 grpc 协议至 127.0.0.1 的 10081 端口。\n关闭 http 监听 services: service_code: test1.v1.opsaid grpc_address: 127.0.0.1:10081 启动服务，将仅在 127.0.0.1:10081 端口监听 grpc 协议。\n","categories":"","description":"","excerpt":"简要概述 描述服务的基础信息。\n配置示例 services: root_path: grpc-kit namespace: example …","ref":"/docs/spec-cfg/services/","tags":"","title":"基础服务"},{"body":"flowchart TD A([开始]) --\u003e A1[主分支 main]; A([开始]) --\u003e A2[开发分支 develop]; Z([结束]) A2 --\u003e A21[新增功能需求: 创建功能分支 feature-XXX]; A21 --\u003e A22{新开发功能是否完成}; A22 --\u003e |是| A221[提交代码执行 CI 阶段]; A221 --\u003e A2211{Runner: 自动化构建与测试案例是否通过}; A2211 --\u003e |是| A22111[从 develop 合并代码并删除 feature-XXX 分支]; A2211 --\u003e |否| A222; A22 --\u003e |否| A222[继续开发自测完成后提交代码]; A222 --\u003e A221; A22111 --\u003e Z; A2 --\u003e A31[累计功能发布: 创建发布分支 release-X.Y]; A31 --\u003e A311{是否已存在 release-X.Y 分支}; A311 --\u003e |是| A3111[从 develop 合并最新代码]; A311 --\u003e |否| A3112[从 develop 创建最新分支]; A3111 --\u003e A3113[监听合并或创建事件 触发CICD阶段]; A3112 --\u003e A3113; A3113 --\u003e A31131{Runner: 自动化构建与测试案例是否通过}; A31131 --\u003e |是| A311311[合并至 develop 分支]; A311311 --\u003e A3113112[合并至 main 分支]; A31131 --\u003e |否| A311312[在 release-X.Y 分支修复异常提交代码]; A311312 --\u003e A3113; A3113112 --\u003e Z; A1 --\u003e A12[来自 release-X.Y 或 hotfix-XXX 的合并请求]; A12 --\u003e A121{管理员确认是否允许}; A121 --\u003e |是| A1211[确认合并]; A121 --\u003e |否| A1212[拒绝合并]; A1212 --\u003e A311312; A1211 --\u003e A13[提交标签 git tag vX.Y.Z]; A13 --\u003e A131[使用 release-X.Y 或 hotfix-XXX 阶段构建的镜像进行部署]; A131 --\u003e A1311{Runner: 自动化部署是否通过}; A1311 --\u003e |是| Z; A1311 --\u003e |否| A311312; A1 --\u003e A11[线上环境发现BUG]; A11 --\u003e A111{确认为BUG是否需修复}; A111 --\u003e |是| A1111[从 main 仓库创建 hotfix-XXX 分支]; A111 --\u003e |否| Z; A1111 --\u003e A112[仅修复BUG代码不涉及任何功能新增]; A112 --\u003e A1121[提交代码在 hotfix-XXX 分支]; A1121 --\u003e A11211{Runner: 自动化构建与测试案例是否通过}; A11211 --\u003e |是| A112111[构建提交容器镜像]; A11211 --\u003e |否| A1121; A112111 --\u003e A11212[合并至 develop 与 main 分支]; A11212 --\u003e A11213[删除 hotfix-XXX 分支]; A11213 --\u003e A12; ","categories":"","description":"","excerpt":"flowchart TD A([开始]) --\u003e A1[主分支 main]; A([开始]) --\u003e A2[开发分支 develop]; …","ref":"/docs/spec-dev/flows/git-flow/","tags":"","title":"Git Flow"},{"body":"简要概述 高效的持续交付体系，必须需要一个合适的代码分支管理策略，主要有：主干开发、特性分支开发。\n只能根据不通的业务场景选择最适合的策略。\n主干开发 开发者在主分支提交代码，发布版本时创建版本发布分支。\n优点：\n集成频繁效率高； 无需在多个分支之间切； 仅包含：主分支、版本分支； 缺点：\n可能出现某个人的代码失误而影响全局； 需要在代码运行期间使用特性切换加速开发； 特性分支开发 需要新增特性时，开发者从主干分支克隆特性分支，仅允许在该分支直接提交代码，待功能完成之后合并至主分支，常见的模型有：git flow、github flow、gitlab flow 三种模型。\nGit Flow 该模型是在2010年构想出来的，在这十几年里，已经被许多软件团队使用，以至于部分开发者将其视为某种标准。\n在使用会涉及到较繁琐的流程，很多团队新人还需额外时间学习才能融入业务开发，反而降低了效率。\n分支功能描述：\n名称 功能 生命周期 代码稳定 权限 main 主分支 长期 是 仅允许开发负责人且只能从 release 分支合并，tag 只能从 main 分支标记 develop 开发分支 长期 是 不允许直接提交，只能由开发负责人且只能从 feature 分支合并 release-X.Y 发布分支 长期 是 不允许直接提交，仅允许从 develop 分支合并 feature-XYZ 功能分支 合并后删除 否 开发可直接提交代码，必须从 develop 分支创建出来 hotfix-XYZ 补丁分支 合并后删除 否 开发可直接提交代码，比较急的异常，直接从 main 分支创建，完成后必须合并至 main 与 develop 分支 查看分支流程。\n查看规范出处。\nGitHub Flow 仅包含主分支与特性分支。\n相比 Git Flow 简化了流程，开发者接收需求并创建独立的特性分支，完成后则发起 “Pull requests” 请求合并，待在其他人审阅并签署确认后由专人合并到主分支，最后删除特性分支。\n名称 功能 生命周期 代码稳定 权限 main 主分支 长期 是 不允许直接提交代码，仅允许负责人合并来自其他分支 feat-X 特性分支 合并后删除 否 由开发人员控制，必须包含完整的文档与测试案例 查看分支流程。\n查看规范出处。\nGitLab Flow https://docs.gitlab.com/ee/topics/gitlab_flow.html\n","categories":"","description":"","excerpt":"简要概述 高效的持续交付体系，必须需要一个合适的代码分支管理策略，主要有：主干开发、特性分支开发。\n只能根据不通的业务场景选择最适合的策略。 …","ref":"/docs/spec-dev/git-branch/","tags":"","title":"分支管理"},{"body":"简要概述 通过在本机安装 go、protoc、protoc-gen-go、protoc-gen-go-grpc、protoc-gen-grpc-gateway、protoc-gen-openapiv2 等编译依赖的组件。\n目前推荐使用本地环境进行应用模版创建、编译。\n基础环境 go 版本安装 版本必须大于等于1.18.x，版本检查：\ngo version centos 7 安装方式：\nyum install -y epel-release.noarch yum install -y golang.x86_64 macOS 安装方式：\nbrew install go 设置全局变量 应用运行均依赖 “GOPATH” 与 “GO111MODULE”，所以必须确保正确设置了该变量。\n# 开启 go mod export GO111MODULE=on # 根据实际情况是否需要设置 proxy export GOPROXY=\"https://goproxy.cn\" # GOPATH 仅做示例，根据实际情况更改 export GOPATH=$HOME/go # 添加 $GOPATH/bin 目录下二进制文件可被 shell 查询 export PATH=$PATH:$HOME/bin:$GOPATH/bin 请确保以上变量在系统全局生效，可以写入 “\"$HOME/.bash_profile” 或 “$HOME/.zshrc” 等。\n安装 grpc-kit-cli 至 https://github.com/grpc-kit/cli/releases 选择最新版本，根据目标系统架构下载。\n目前支持以下架构：\nmacOS intel x86_64 macOS apple m linux x86_64 linux arm64 安装 protoc 插件 手工安装 protoc 或者通过通过-make-下载依赖。\n使用 protoc 版本 v21.12，根据不同系统选择下载地址：\nhttps://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-linux-x86_64.zip https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-linux-aarch_64.zip https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-osx-aarch_64.zip https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-osx-x86_64.zip Linux x86_64 系统安装 protoc 选择，示例：\ncd /tmp curl -L -O 'https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-linux-x86_64.zip' unzip protoc-21.12-linux-x86_64.zip # 相关二进制存放 GOPATH/bin 目录下 mv bin/protoc $GOPATH/bin/ # 对 protoc 公知类型移动至 /usr/local/include 目录下 mv include/google /usr/local/include/ # 清理移除垃圾数据 rmdir bin/ include/ 特别的，对于 macOS apple 芯片选择 v21.12 的 aarch 架构版本，如：\nprotoc-3.19.3-linux-aarch_64.zip curl -L -O 'https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-osx-aarch_64.zip' 手工安装 protoc-gen-X 或者通过通过-make-下载依赖。\nprotoc-gen-go、protoc-gen-go-grpc、protoc-gen-grpc-gateway、protoc-gen-openapiv2 各版本安装，会自动拷贝二进制至 “$GOPATH/bin” 下面：\ngo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2 go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28 go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@v2.15.2 go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@v2.15.2 手工安装依赖的 proto 文件 或者通过通过-make-下载依赖。\ngit clone -b v0.3.0 --depth 1 https://github.com/grpc-kit/api.git $GOPATH/src/github.com/grpc-kit/api git clone --depth 1 https://github.com/googleapis/googleapis.git $GOPATH/src/github.com/googleapis/googleapis git clone -b v2.15.2 --depth 1 https://github.com/grpc-ecosystem/grpc-gateway.git $GOPATH/src/github.com/grpc-ecosystem/grpc-gateway 手工安装 grpc-kit-cli 二进制 可通过以下两种方式进行\n下载二进制安装 https://github.com/grpc-kit/cli/releases 源码编译安装 git clone https://github.com/grpc-kit/cli.git make build cp ./build/grpc-kit-cli-* /usr/local/bin/grpc-kit-cli 生成应用的模版 生成代码模版\nmkdir -p $GOPATH/src/github.com/opsaid cd $GOPATH/src/github.com/opsaid ./grpc-kit-cli new -t service -o grpc-kit -p opsaid -s test1 --git-domain github.com 通过 make 下载依赖 make protoc make protoc-gen-go make protoc-gen-go-grpc make protoc-gen-grpc-gateway make protoc-gen-openapiv2 取保 $GOPATH/bin 目录在 $PATH 里面。\n服务访问测试 运行微服务代码 make run 微服务接口文档 http://127.0.0.1:8080/openapi-spec/ 微服务编译版本 # curl http://127.0.0.1:8080/version | python -m json.tool { \"appname\": \"test1.v1.opsaid\", \"build_date\": \"2023-01-13T09:10:45Z\", \"git_commit\": \"1234567890123456789012345678901234567890\", \"git_branch\": \"\", \"go_version\": \"go1.18.5\", \"compiler\": \"gc\", \"platform\": \"darwin/amd64\", \"cli_version\": \"0.2.3\", \"commit_unix_time\": 0, \"release_version\": \"0.1.0\" } 微服务性能数据 # curl http://127.0.0.1:8080/metrics # HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles. # TYPE go_gc_duration_seconds summary go_gc_duration_seconds{quantile=\"0\"} 0.000114581 go_gc_duration_seconds{quantile=\"0.25\"} 0.000873528 go_gc_duration_seconds{quantile=\"0.5\"} 0.002296699 go_gc_duration_seconds{quantile=\"0.75\"} 0.003722618 go_gc_duration_seconds{quantile=\"1\"} 0.010592338 go_gc_duration_seconds_sum 0.033207328 go_gc_duration_seconds_count 12 # HELP go_goroutines Number of goroutines that currently exist. # TYPE go_goroutines gauge go_goroutines 19 ... 微服务健康探测 探测流量仅到 gateway 不会调度到 grpc 服务。\n# curl http://127.0.0.1:8080/ping OK 探测流量同时到 gateway 与 grpc 服务。\n# curl 'http://127.0.0.1:8080/healthz?service=test1.v1.opsaid' {\"status\":\"SERVING\"} 示例 demo 接口 # curl -u user1:grpc-kit-cli http://127.0.0.1:8080/api/demo ","categories":"","description":"","excerpt":"简要概述 通过在本机安装 go、protoc、protoc-gen-go、protoc-gen-go-grpc、protoc-gen-grp …","ref":"/docs/overview/local/","tags":"","title":"本机环境"},{"body":" gitGraph commit commit branch increase-test-timeout commit commit checkout main merge increase-test-timeout commit branch add-code-of-conduct commit commit checkout main merge add-code-of-conduct commit ","categories":"","description":"","excerpt":" gitGraph commit commit branch increase-test-timeout commit commit …","ref":"/docs/spec-dev/flows/github-flow/","tags":"","title":"Github Flow"},{"body":"简要概述 用于规范项目代码提交日志，这里借鉴 Angular 规则，规范化的提交记录，有以下好处：\n快速查找历史变更信息； 自动化生成 CHANGELOG.md 文档； 提交规范 各个 git commit 提交记录，由：header、body、footer 三部分组成，格式如下：\n\u003cheader\u003e // 空一行 \u003cbody\u003e // 空一行 \u003cfooter\u003e 其中 header 是强制填写，由以下三部分组成：\n\u003ctype\u003e(\u003cscope\u003e): \u003cshort summary\u003e │ │ │ │ │ └─⫸ 本次变更内容的一句话总结，中文或小写英文，末尾不带句号 │ │ │ └─⫸ 涉及变更的主要模块，如：cli|pkg|api │ └─⫸ 本次提交功能变更的类型，如：feat|fix|docs|perf|refactor|test 参数详解 header type type 说明 feat 涉及业务代码变更，添加新功能 fix 涉及业务代码变更，修复已知BUG perf 涉及业务代码变更，优化功能性能、体验等 refactor 涉及业务代码变更，但不属于 feat、fix、perf 的类型 ci 仅涉及流水线变更，如：gitlab-ci、github action 的 yaml 文件 docs 仅涉及文档类变更，如：README.md 或 代码注释 等 release 仅涉及版本号变更，如：VERSION、CHANGELOG.md 中关联的值 test 仅涉及测试代码变更，如：hello_test.go build 仅涉及构建编译依赖的组件版本等变更，如：go.mod chore 其他琐碎的变更，但对代码功能没有影响，比如删除了无用的代码、注释等清理操作 scope 代码变更的模块，如：cli、pkg、api 等，这块为可选，非必填内容。\nsummary 编写一个具有概括性简短的描述\n不超过 50 个字符 可选择编写中文或英文 英文统一小写，首字母不大写 英文专业术语除外，如：Makefile 末尾不带任何标点符号 示例：\nfeat(cli): 在 Makefile 中添加容器化构建应用 release: cut the 0.2.4-beta.1 docs: release notes for the 0.2.4-beta.1 body 解释此次变更的详细描述，可由多行组成，格式准守 “Markdown” 语法。\nfooter 仅在两种情况下才会使用：\n不兼容的更改 如果当前代码提交之后，会对上一个版本不兼容，则必须以 BREAKING CHANGE 开头，后面在添加详细描述。\nBREAKING CHANGE: \u003cbreaking change summary\u003e \u003cBLANK LINE\u003e \u003cbreaking change description + migration instructions\u003e \u003cBLANK LINE\u003e \u003cBLANK LINE\u003e Fixes #\u003cissue number\u003e 关闭 issue 如果当前提交是针对某个 “issue”，那么可以以 Closes # 加问题编号。\n已经废弃的功能 DEPRECATED: \u003cwhat is deprecated\u003e \u003cBLANK LINE\u003e \u003cdeprecation description + recommended update path\u003e \u003cBLANK LINE\u003e \u003cBLANK LINE\u003e Closes #\u003cpr number\u003e 相关示例 查看历史变更记录 git log HEAD --pretty=format:%s ","categories":"","description":"","excerpt":"简要概述 用于规范项目代码提交日志，这里借鉴 Angular 规则，规范化的提交记录，有以下好处：\n快速查找历史变更信息； …","ref":"/docs/spec-dev/git-commit/","tags":"","title":"提交日志"},{"body":"简要概述 通过容器环境，快速创建应用模版并编译、运行。相对于本地环境，这样无需在开发机器安装各种依赖的组件，但目前容器环境还存在部分问题，推荐使用本地环境。\n生成代码并运行 创建应用模版 docker run \\ --rm \\ -v $(pwd):/usr/local/src \\ -w /usr/local/src \\ registry.cn-hangzhou.aliyuncs.com/grpc-kit/cli:0.2.4-beta.1 \\ grpc-kit-cli new -t service -p opsaid -s test1 运行应用代码 docker run -i -t --rm \\ -v $GOPATH/pkg:/go/pkg \\ -v $(pwd):/usr/local/src \\ -w /usr/local/src \\ --network host \\ registry.cn-hangzhou.aliyuncs.com/grpc-kit/cli:0.2.4-beta.1 \\ make run 服务访问测试 参考本地环境。\n","categories":"","description":"","excerpt":"简要概述 通过容器环境，快速创建应用模版并编译、运行。相对于本地环境，这样无需在开发机器安装各种依赖的组件，但目前容器环境还存在部分问题，推 …","ref":"/docs/overview/docker/","tags":"","title":"容器环境"},{"body":"简要概述 认证、鉴权。\n配置示例 security: enable: true authentication: insecure_rpcs: - SearchHosts oidc_provider: issuer: https://accounts.example.com config: client_id: example supported_signing_algs: - RS256 skip_client_id_check: true skip_expiry_check: false skip_issuer_check: true insecure_skip_verify: true http_users: - username: user1 password: pass1 groups: - sysadmin authorization: allowed_groups: - sysadmin 配置参数 Security 名称 类型 说明 enable bool 是否开启认证、鉴权 authentication Authentication 用户认证，也就是当前是谁在登录 authorization Authorization 用户鉴权，也就是当前登录用户是否有权限操作对应资源 Authentication 名称 类型 说明 insecure_rpcs []string 对应 gRPC 的方法，可以跳过认证 oidc_provider OIDCProvider OIDC 相关配置 http_users []BasicAuth 用户密码列表 OIDCProvider 名称 类型 说明 issuer string oidc 提供者 config OIDCConfig oidc 配置 OIDCConfig 名称 类型 说明 client_id string 用于验证 token.aud 是否与 client_id 相等 supported_signing_algs []string 服务端允许 token 的签名算法类型 skip_client_id_check bool 忽略 token.aud 与client_id 的验证 skip_expiry_check bool 忽略 token 是否过期的验证 skip_issuer_check bool 忽略 token issuer 的验证 insecure_skip_verify bool 忽略 issuer 的ca验证 BasicAuth 名称 类型 说明 username string 用户名 password string 用户 secret_key groups []string 用户归属组 Authorization 名称 类型 说明 allowed_groups []string 所有请求至该服务端的用户必须至少属于一个组内 使用场景 允许所有请求 security: enable: false 服务端允许所有接口请求，均以匿名用户。\nHTTP Basic 用户 security: enable: true authentication: http_users: - username: user1 password: pass1 - username: user2 password: pass2 开启服务端接口验证，通过 HTTP Basic Auth 方式，允许用户 “user1:pass1” 或 “user2:pass2” 发起请求通过认证。\n忽略特定 RPC 验证 security: enable: true authentication: insecure_rpcs: - Demo - HealthCheck http_users: - username: user1 password: pass1 开启服务端接口验证，但是忽略 “Demo” 与 “HealthCheck” 两个 gRPC 方法。\n开启 Tokne 支持 HS256 签名 security: enable: true authentication: oidc_provider: issuer: https://accounts.example.com config: supported_signing_algs: - HS256 skip_issuer_check: true insecure_skip_verify: true http_users: - username: user1 password: pass1 支持客户端 Token 是以 HS256 签名算法，其中 “token.sub” 为 “user1” 并使用 “pass1” 为密钥做签名。\n注意：这种签名的 token 不会传递给所配置的 oidc 服务提供验证，而是替换使用本地配置的 http basic 用户所对应的密码作为 token 的签名密钥\n","categories":"","description":"","excerpt":"简要概述 认证、鉴权。\n配置示例 security: enable: true authentication: insecure_rpcs: …","ref":"/docs/spec-cfg/security/","tags":"","title":"认证鉴权"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/spec-cfg/","tags":"","title":"配置规范"},{"body":" 用于规范开发流程，关键在于工作的流程\n","categories":"","description":"","excerpt":" 用于规范开发流程，关键在于工作的流程\n","ref":"/docs/spec-dev/","tags":"","title":"开发规范"},{"body":" 用于规范定义 rpc、http restful 接口设计，以便准守相同规则的人可以更轻松地协同工作\n","categories":"","description":"","excerpt":" 用于规范定义 rpc、http restful 接口设计，以便准守相同规则的人可以更轻松地协同工作\n","ref":"/docs/spec-api/","tags":"","title":"接口规范"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/devops/","tags":"","title":"运维管理"},{"body":"简要概述 对于通过 grpc-kit-cli 生成的每个微服务模版，如果它们存在需要个性化配置与数据结构，那么可以在这里定义。\n配置示例 independent: name: grpc-kit 数据结构 在 github.com/grpc-kit/pkg/cfg 中内置的数据结构，这个由框架管理，用户无法自定义：\ntype LocalConfig struct { ...... Independent interface{} `json:\",omitempty\"` // 应用私有配置 ...... } 在生成各服务模版的结构，这个由用户自定义：\npackage modeler // IndependentCfg 个性配置 type IndependentCfg struct { Name string `mapstructure:\"name\"` } // Init 用于初始化实例 func (i *IndependentCfg) Init() error { // 业务代码 return nil } 应用场景 一个自定义服务 生成以下 app.yaml 配置项：\n# 应用私有配置 independent: # 消息数据写入kafka的topic message: cmdb: # 资产类信息 topic: uptime-alertmanager metric: # 性能指标类 topic: uptime # 主机注册的相关配置 registry: default: host_ttl: 60 heartbeat: 10 在对应的 modeler/independent_cfg.go 中数据结构为：\n// IndependentCfg 个性配置 type IndependentCfg struct { Message MessageConfig `mapstructure:\"message\"` Registry RegistryConfig `mapstructure:\"registry\"` } // MessageConfig 用于kafka消息的配置 type MessageConfig struct { CMDB struct { Topic string `mapstructure:\"topic\"` } `mapstructure:\"cmdb\"` Metric struct { Topic string `mapstructure:\"topic\"` Drop bool `mapstructure:\"drop\"` } `mapstructure:\"metric\"` } // RegistryConfig xx type RegistryConfig struct { Default ConfigContent `mapstructure:\"default\"` } // ConfigContent 一个具体的配置项 type ConfigContent struct { // Address 隧道的地址 Address []string `mapstructure:\"address\"` // 主机注册存活的时间 HostTTL int `mapstructure:\"host_ttl\"` // 维持主机心跳时间，必须小于 host_ttl Heartbeat int `mapstructure:\"heartbeat\"` } ","categories":"","description":"","excerpt":"简要概述 对于通过 grpc-kit-cli 生成的每个微服务模版，如果它们存在需要个性化配置与数据结构，那么可以在这里定义。 …","ref":"/docs/spec-cfg/independent/","tags":"","title":"应用私有"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/changelog/","tags":"","title":"更新日志"},{"body":"Changelog 名称 说明 Added 添加新功能 Changed 功能的变更 Deprecated 未来会删除 Removed 之前为Deprecated状态，此版本被移除 Fixed 功能的修复 Security 有关安全问题的修复 [Unreleased] [0.3.0] - 2023-03-10 Added 新增 “组织代码” 作为所有 proto 包名前缀\n默认 “组织代码” 取值为 “grpc-kit”\n根据规则自动生成内置变量：应用名称、服务包名、服务标题、服务代码\nAPPNAME、PROTO_PACKAGE、SERVICE_TITLE、SERVICE_CODE 对 microservice.proto 文件中的功能注解分离并声明式\n分离 “google.api.http” 功能到文件 “microservice.gateway.yaml”\n文档地址：https://github.com/googleapis/googleapis/blob/master/google/api/service.proto\n分离 “grpc.gateway.protoc_gen_openapiv2.options” 功能到文件 “microservice.openapiv2.yaml”\n文档地址：https://github.com/grpc-ecosystem/grpc-gateway/internal/descriptor/openapiconfig/openapiconfig.proto\n去掉 gogo 模块，升级 grpc-gateway v2 版本\n移除了 https://github.com/gogo/protobuf 的依赖； 升级了 grpc-gateway 为 v2 版本； 重新规范公知类 proto 的文件存放目录\n更改了 https://github.com/grpc-kit/api 原先 proto 路径规范； proto/v1/example.proto proto/v1/tracing.proto 更改为以下格式：\nknown/status/v1/response.proto known/example/v1/example.proto known/config/v1/config.proto 更改了 proto 的包名称： grpc.kit.api.proto.v1 更改为以下前缀：\ngrpc_kit.api.known. 更改库 “errors” 为 “errs” 防止对标准库重名\n更改 “github.com/grpc-kit/pkg/errors” 为 “github.com/grpc-kit/pkg/errs”； 升级 proto 使用 “google.golang.org/protobuf/proto” 版本 状态使用公知版本 “grpc_kit.api.known.status.Status” 结构体 移除 pkg/api 中使用 gogo 类库\n去除由 “protoc-gen-gogo” 生成的 “pb.go” 文件 统一使用新规范后的 “grpc-kit/api proto” 生成的 “pb.go” 文件 使用 gitlab-ci runner 为 shell 添加默认变量\n默认模版添加以下变量； # 默认全局变量 variables: CGO_ENABLED: \"0\" GIT_SSL_NO_VERIFY: \"true\" #GO111MODULE: \"on\" #GOPROXY: \"https://goproxy.cn\" #GOSUMDB: \"sum.golang.google.cn\" #GOPRIVATE: \"\" #GOPATH: \"/home/gitlab-runner/go\" Fixed make lint 首次无法正常运行\n首次代码初始化后 “api/” 目录下不存在 “*.pb.go” 代码，导致无法引用； 通过在执行 make lint 之前，做 “proto” 文件的序列化； ","categories":"","description":"","excerpt":"Changelog 名称 说明 Added 添加新功能 Changed 功能的变更 Deprecated 未来会删除 Removed 之前 …","ref":"/docs/changelog/changelog-0.3/","tags":"","title":"CHANGELOG 0.3"},{"body":"Changelog 名称 说明 Added 添加新功能 Changed 功能的变更 Deprecated 未来会删除 Removed 之前为Deprecated状态，此版本被移除 Fixed 功能的修复 Security 有关安全问题的修复 [Unreleased] [0.2.3] - 2022-11-28 Added grpc-kit/pkg 模块\n支持针对用户组进行鉴权 http_users 新增 “groups” 属性； 如果配置了 “security.authorization.allowed_groups” 则所有需要认证鉴权的接口必须属于该组里面，否则会403； 用户组区分大小写 添加最小化配置示例 未配置的模块，将不开启该功能 添加 “app-mini.yaml” 示例 添加健康检测服务可对外部网络 添加 “HTTP GET /ping” 接口，不过 grpc 服务 区别于 “HTTP GET /healthz”，该接口过 grpc 服务 grpc-kit/cli 模块\n支持自定义应用短名称 通过自定义\"SHORTNAME\"变量； 所有脚本应用shell更改 ubuntu默认为dash，明确使用\"/bin/bash\"，而非\"/bin/sh\"，会导致部分shell不支持 更改默认 http 服务端口 10080 至 8080 由于chrome等浏览器默认对\"10080\"端口存在\"ERR_UNSAFE_PORT\"告警，所以更改http默认为\"8080\" cli、pkg 组件版本号统一 为了解决统一编写变更记录(CHANGELOG.md) 支持自动生成 kubernetes 编排模版 新增 “DEPLOY_ENV” 变量，表示部署环境，如：dev、test、prod 新增 “BUILD_ENV” 变量，表示构建环境，一般用户自定义，默认为：local 新增指令 make manifests 生成基于 Kubernetes 的编排清单 模版路径：scripts/templates/kubernetes [0.2.2] - 2022-06-30 Changed 版本号格式的变更 旧规则以\"v\"为前缀，更新后不在带\"v\"为前缀，如：“v0.1.0-beta.3”，变更为：“0.1.0-beta.3”\nAdded 新增\"VERSION\"文件 用于描述当前分支版本，同时提供给CICD使用，如果当前分支未打成\"tag\"，则均说明是先行版本号，同时版本去掉以\"v\"开头；\n新增\"Makefile\"的帮助说明 make help [0.2.1] - 2022-06-09 Added “api/doc\"目录内容更改至\"public/doc” “api/proto\"目录更改为\"api/{product-code}/{short-name}” “cli\"新增\"repository\"参数用于说明代码仓库名 rpc客户端、服务端实例初始化转移至\"cfg\"实现 favicon.ico文件移至自定义http handler中实现 http接口统一以”/api/“为前缀对外暴露 ","categories":"","description":"","excerpt":"Changelog 名称 说明 Added 添加新功能 Changed 功能的变更 Deprecated 未来会删除 Removed 之前 …","ref":"/docs/changelog/changelog-0.2/","tags":"","title":"CHANGELOG 0.2"},{"body":"Changelog 名称 说明 Added 添加新功能 Changed 功能的变更 Deprecated 未来会删除 Removed 之前为Deprecated状态，此版本被移除 Fixed 功能的修复 Security 有关安全问题的修复 [Unreleased] [0.1.1] - 2021-11-10 Added 添加pkg/errors的示例 默认配置使用yaml格式 更新依赖的grpc-gateway等几个版本 根据product_code与short_name自动生成服务名称 服务结构添加rpc.Client属性，用于调用其他依赖服务 [0.1.0] - 2020-04-12 Added 首次发布 ","categories":"","description":"","excerpt":"Changelog 名称 说明 Added 添加新功能 Changed 功能的变更 Deprecated 未来会删除 Removed 之前 …","ref":"/docs/changelog/changelog-0.1/","tags":"","title":"CHANGELOG 0.1"},{"body":"简要概述 通过 systemd 来管理服务的生命周期。\n生成配置 在微服务代码目录，执行：\nmake manifests 将会生成 systemd 配置在 deploy/systemd/${APPNAME}.service 目录，把配置拷贝到目标主机 /usr/lib/systemd/system/${APPNAME}.service，启用服务：\nsystemctl enable ${APPNAME} systemctl start ${APPNAME} 服务模版 [Unit] After=network-online.target Documentation=http://(app.yaml:services.http_address)/openapi-spec/ Description=The ${SERVICE_CODE} microservice. For more API detailed, please refer to the docs [Service] Type=simple User=nobody Restart=always RestartSec=15s TimeoutSec=60s LimitNOFILE=65535 KillMode=control-group MemoryLimit=2048M ExecStart=/usr/local/${PRODUCT_CODE}/${SHORT_NAME}/${API_VERSION}/service --config /usr/local/${PRODUCT_CODE}/${SHORT_NAME}/${API_VERSION}/config/app.yaml [Install] Alias=${APPNAME}.service WantedBy=multi-user.target 其中变量 “SERVICE_CODE”、“PRODUCT_CODE”、“SHORT_NAME”、“APPNAME” 依据关键术语填写。\n","categories":"","description":"","excerpt":"简要概述 通过 systemd 来管理服务的生命周期。\n生成配置 在微服务代码目录，执行：\nmake manifests …","ref":"/docs/devops/deploy/systemd/","tags":"","title":"Systemd"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/spec-dev/flows/","tags":"","title":"分支流程"},{"body":"api 作用 所有基础数据结构的定义\nFaqs 使用gogoproto来代替google官方的proto是什么原因？ 需要兼容各个现有的http服务接口，比如pushgateway、alertmanager等\n默认序列化的规则 restful接口规范 具体接口返回属性以：驼峰、下画线 没有统一标准\n除非服务特殊说明，否则默认均以下划线为默认标准，\n{ \"type_url\": \"\", } 所有返回值建议带key，默认均不建议直接通过数组响应\n[ {xxx}, {xxx} ] =\u003e { \"key\": [ {xxx}, {yyy} ] } 使用场景 控制平面 基于k8s apiserver为控制平面类，可以接入git进行管理\n数据平面 基于grpc-kit为数据平面，也就是所有流量要经过它\n接口规范 POST /api/alerts /healthz /metrics /debug/pprof 参考规范 kubebuilder https://cloud.google.com/apis/design https://stackoverflow.com/questions/5543490/json-naming-convention-snake-case-camelcase-or-pascalcase https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/create#request-body ","categories":"","description":"","excerpt":"api 作用 所有基础数据结构的定义\nFaqs 使用gogoproto来代替google官方的proto是什么原因？ 需要兼容各个现有 …","ref":"/docs/spec-cfg/api/","tags":"","title":""},{"body":"cfg 配置说明 当Debugger为\"debug\"模式或者开启opentracing的log_field http_body，且content-type为json时，开启记录用户请求体\n仅 LocalConfig 对外提供函数调用，其他均为方法内私有\n","categories":"","description":"","excerpt":"cfg 配置说明 当Debugger为\"debug\"模式或者开启opentracing的log_field http_body， …","ref":"/docs/spec-cfg/cfg/","tags":"","title":""},{"body":"Readme 结合go领域比较出名的工具适配\n说明 api 用于定义项目的公共结构 cfg 用于实现项目配置类的初始化 pkg 用于实现项目各个公共实现 doc 用于记录项目的文档使用 web 用于实现项目的可视化管理后台 adm 用于实现项目的管理接口\n代码 https://github.com/googleapis/go-genproto https://github.com/googleapis/googleapis/blob/master/google/monitoring/v3/metric.proto\n","categories":"","description":"","excerpt":"Readme 结合go领域比较出名的工具适配\n说明 api 用于定义项目的公共结构 cfg 用于实现项目配置类的初始化 pkg 用于实现项目 …","ref":"/docs/spec-cfg/cli/","tags":"","title":""},{"body":" 快速生成代码模版，以符合相同规范、统一治理的微服务脚手架，助力产品快速更新迭代。\ngRPC Kit 文档中心 源码跟踪 ","categories":"","description":"","excerpt":" 快速生成代码模版，以符合相同规范、统一治理的微服务脚手架，助力产品快速更新迭代。\ngRPC Kit 文档中心 源码跟踪 ","ref":"/","tags":"","title":"gRPC Kit"},{"body":" gGRPC Kit 是什么？\n一个以 Go 语言为主的微服务脚手架，主要基于以下几个核心类库实现：\ngrpc grpc-gateway ","categories":"","description":"","excerpt":" gGRPC Kit 是什么？\n一个以 Go 语言为主的微服务脚手架，主要基于以下几个核心类库实现：\ngrpc grpc-gateway ","ref":"/docs/","tags":"","title":"Documentation"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"}]